#!/usr/bin/perl
use Time::HiRes qw(sleep gettimeofday);
use Data::Dumper qw(Dumper);
use Math::Round;
use Net::SNMP;
$|=1;
$x=$ARGV[0];
    ($ip,$p,$c) = split /:/ , $x;
    $f=$ARGV[1];
    $s=$ARGV[2];
    $t=1/$f;

if($s==-1){
$s="inf";
}

push @oid,'1.3.6.1.2.1.1.3.0'; 
    for($i=3;$i<=$#ARGV;$i++){
    push @oid,$ARGV[$i];
}        

   
my ($session,$error) = Net::SNMP->session(
         -hostname    => $ip,
         -community   => $c,
         -port      =>  $p,
         -translate =>  [-timeticks => 0,],
         -nonblocking => 1,       
         -version   => 'snmpv2c',
      );

      if (!defined $session) {
         printf "ERROR: %s.\n", $error;
      
      }



for($a=0;$a<=$s;$a++){

      my $result = $session->get_request(-varbindlist => \@oid ,
                                         -callback    => [\&get_callback, $a] );
      if (!defined $result) {
         printf "ERROR: %s.\n", $session->error();
      $session->close();
     exit 1;
      }

$t1 = Time::HiRes::time;

   snmp_dispatcher();

$t2 = Time::HiRes::time;

$et = $t2-$t1;
$et=sprintf("%.2f",$et);



if(($t-$et)<=0.00){
next;
}
if($et>0.1){
$z=$t-$et;
Time::HiRes::sleep($z);
}

else{
Time::HiRes::sleep($t);
}


}
exit 0;



sub get_callback{

my ($session, $a) = @_;

$time = time;

$result = $session->var_bind_list();
$types = $session->var_bind_types();
     
      if (!defined $result) {
         printf "ERROR: Get request failed for host '%s': %s.\n",
                $session->hostname(), $session->error();
         return;
      }
if($a != 0){
print time," | ";
}

for($i=1;$i<=$#oid;$i++){
$o->{$oid[$i]} = $result->{$oid[$i]};          
if(!exists $pv{$oid[$i]}){
$pv{$oid[$i]} = $o->{$oid[$i]};
$pt{$oid[$i]} = $time;
next;   
}

$nv{$oid[$i]} = $o->{$oid[$i]};
$nt{$oid[$i]} = $time;

$st= $nt{$oid[$i]} - $pt{$oid[$i]};
$st = nearest(0.1,$st);
$sd= $nv{$oid[$i]} - $pv{$oid[$i]};

$r=$sd/$st;

if($r<0){
if($types->{$oid[$i]}==65){
#print "COUNTER32";
$new32 = 2**32 + $nv{$oid[$i]};
$sd=($new32-$pv{$oid[$i]}) ;
$r = $sd/$st;
}
if($types->{$oid[$i]}==70){
#print "COUNTER64  ";
$new64 = 2**64 + $nv{$oid[$i]};
$sd=($new64 - $pv{$oid[$i]}) ;
$r = $sd/$st;
}

}


printf "%.0f | ",$r ;


$pt{$oid[$i]} = $nt{$oid[$i]};
$pv{$oid[$i]} = $nv{$oid[$i]};


}

if($a!=0){
print "\n";
}

return;
}










